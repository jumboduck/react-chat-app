{"version":3,"sources":["helpers/generatePhrase.js","components/MsgForm/index.js","components/Message/index.js","components/ChatWindow/index.js","components/NewFriendForm/index.js","components/FriendList/index.js","components/ChatApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["generatePhrase","fetch","then","response","json","data","text_out","replace","MsgForm","props","input","msgInput","current","handleSubmit","event","a","preventDefault","trimmedMsg","savedMsg","trim","length","editMode","updateMessage","addNewMessage","phrase","setTimeout","result","generatedPhrase","useState","displayEmojis","setDisplayEmojis","className","onSubmit","htmlFor","disableAutoFocus","onEmojiClick","emojiObject","cursorPosition","selectionStart","selectionLength","selectionEnd","textArray","value","split","splice","emoji","newText","join","setSavedMsg","focus","type","onClick","icon","faSmile","id","ref","placeholder","autoComplete","onChange","currentTarget","onKeyDown","keyCode","lastMessageIndex","testIndex","currentMessages","direction","blur","enterEditMode","faPaperPlane","Message","message","index","editIndex","edit","time","ChatWindow","currentFriend","messages","name","messageList","useRef","useEffect","addEventListener","target","scroll","top","scrollHeight","map","updateSaved","setEditMode","NewFriendForm","addNewFriend","faPlusCircle","FriendList","handleClick","newSaveMsg","newConv","dataset","conv","setCurrentConv","saved","setDisplayFriends","displayFriends","friendList","Object","entries","key","push","faBars","faUserFriends","friend","currentConv","data-conv","ChatApp","setEditIndex","1","2","3","4","5","setData","msg","selectedConv","updatedData","keys","x","parseInt","newKey","Math","max","toString","newMessage","Date","toLocaleString","savedMessage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82b59e11.chunk.js","sourcesContent":["/** Generate an incoming message by connecting to the randomtext.me API */\n\nconst generatePhrase = () => {\n    return fetch(\"https://www.randomtext.me/api/gibberish/p-1/1-10/\")\n        .then((response) => response.json())\n        .then((data) => {\n            return data.text_out.replace(/(<([^>]+)>(\\\\r)?)/gi, \"\");\n        });\n};\n\nexport default generatePhrase;\n","import React, { useState } from \"react\";\nimport generatePhrase from \"./../../helpers/generatePhrase.js\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane, faSmile } from \"@fortawesome/free-solid-svg-icons\";\nimport Picker from \"emoji-picker-react\";\n\n/**\n * This renders the form to send a new message.\n */\nconst MsgForm = (props) => {\n    const input = props.msgInput.current;\n\n    /** This functions handles the submission of the new message form */\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        /* We ensure the message is not empty, and trim any extra space\n         * before sending */\n        let trimmedMsg = props.savedMsg.trim();\n\n        if (trimmedMsg.length > 0) {\n            !props.editMode\n                ? props.addNewMessage(trimmedMsg, \"outgoing\")\n                : props.updateMessage(trimmedMsg);\n        }\n\n        /* If editMode is off, a new response is generated  */\n        if (!props.editMode) {\n            let phrase = \"\";\n            const generatedPhrase = async () => {\n                setTimeout(async () => {\n                    const result = await generatePhrase();\n                    phrase = result;\n                    props.addNewMessage(phrase, \"incoming\");\n                }, 2000);\n            };\n\n            generatedPhrase();\n        }\n    };\n\n    /** Update the saved message when the input changes */\n    const handleChange = (event) => {\n        props.setSavedMsg(event.currentTarget.value);\n    };\n\n    /** This state defines if the emoji picker is visible or not */\n    const [displayEmojis, setDisplayEmojis] = useState(false);\n\n    /**\n     * This function handles displaying or hiding the emoji picker on click\n     * @param {onClick} event\n     */\n    const handleDisplayPicker = (event) => {\n        event.preventDefault();\n        setDisplayEmojis(!displayEmojis);\n    };\n\n    /** Edit the latest message when up arrow is pressed */\n    const handleKeyPress = (event) => {\n        if (\n            event.keyCode === 38 &&\n            props.lastMessageIndex >= 0 &&\n            props.editMode === false\n        ) {\n            // Find the index of the latest outgoing message\n            let testIndex = props.lastMessageIndex;\n            while (props.currentMessages[testIndex].direction === \"incoming\") {\n                testIndex--;\n            }\n            input.blur();\n            setTimeout(() => {\n                props.enterEditMode(testIndex);\n            }, 0);\n        }\n    };\n    /**\n     * Adds an emoji in the string of the input, at the curor's current position\n     * Browser focus then returns to the text input and places the cursor after the\n     * emoji\n     */\n    const onEmojiClick = (event, emojiObject) => {\n        setDisplayEmojis(false);\n        const cursorPosition = input.selectionStart;\n        const selectionLength = input.selectionEnd - input.selectionStart;\n        const textArray = input.value.split(\"\");\n        textArray.splice(cursorPosition, selectionLength, emojiObject.emoji);\n        const newText = textArray.join(\"\");\n        props.setSavedMsg(newText);\n\n        input.focus();\n        input.selectionStart = input.selectionEnd = cursorPosition + 1;\n    };\n\n    return (\n        <form\n            className={\n                props.editMode ? \"message-form editing-input\" : \"message-form\"\n            }\n            onSubmit={handleSubmit}\n            key={\"MessageForm\"}\n        >\n            <label htmlFor=\"message-input\" className=\"sr-only\">\n                Message:\n            </label>\n            <div className={displayEmojis ? \"emoji-picker\" : \"hidden\"}>\n                <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\n            </div>\n            <button\n                type=\"button\"\n                className=\"open-emojis\"\n                onClick={handleDisplayPicker}\n            >\n                <FontAwesomeIcon icon={faSmile} />\n            </button>\n            <input\n                id=\"message-input\"\n                type=\"text\"\n                ref={props.msgInput}\n                className=\"message-input\"\n                placeholder=\"Type here...\"\n                autoComplete=\"off\"\n                onChange={handleChange}\n                value={props.savedMsg || \"\"}\n                onKeyDown={handleKeyPress}\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">send</span>\n                <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n        </form>\n    );\n};\n\nexport default MsgForm;\n","import React from \"react\";\n\nconst Message = (props) => {\n    const handleClick = () => props.enterEditMode(props.index);\n\n    return (\n        <>\n            {props.message.direction === \"outgoing\" ? (\n                <div className=\"outgoing\">\n                    <button\n                        className={\n                            props.editMode && props.index === props.editIndex\n                                ? \"message editing\"\n                                : \"message\"\n                        }\n                        onClick={handleClick}\n                    >\n                        {props.message.message}\n                    </button>\n                    <p className=\"msg-date\">\n                        {props.message.edit\n                            ? \"edited on \" + props.message.edit\n                            : props.message.time}\n                    </p>\n                </div>\n            ) : (\n                <div className=\"incoming\">\n                    <div className=\"message\">{props.message.message}</div>\n                    <p className=\"msg-date\">\n                        {props.message.edit\n                            ? \"edited on \" + props.message.edit\n                            : props.message.time}\n                    </p>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Message;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport generatePhrase from \"./../../helpers/generatePhrase.js\";\nimport MsgForm from \"../MsgForm\";\nimport Message from \"../Message\";\n\n/**\n * This renders the entire chat window, including the list of messages and the\n * input for new messages.\n */\nconst ChatWindow = (props) => {\n    const currentFriend = props.messages.name;\n    const currentMessages = props.messages.messages;\n    const messageList = useRef(null);\n\n    /**\n     * This effect ensures the pages scrolls to the bottom of the page if the\n     * height of the message list is longer than the height of its container\n     */\n    useEffect(() => {\n        if (messageList) {\n            messageList.current.addEventListener(\"DOMNodeInserted\", (event) => {\n                const { currentTarget: target } = event;\n                target.scroll({ top: target.scrollHeight });\n            });\n        }\n    }, []);\n\n    return (\n        <div className=\"chat-window\">\n            <ul className=\"message-list\" ref={messageList}>\n                {currentMessages.length !== 0\n                    ? currentMessages.map((message, index) => (\n                          <li key={index}>\n                              <Message\n                                  message={message}\n                                  enterEditMode={props.enterEditMode}\n                                  index={index}\n                                  editMode={props.editMode}\n                                  editIndex={props.editIndex}\n                              />\n                          </li>\n                      ))\n                    : null}\n            </ul>\n\n            {currentMessages.length === 0 ? (\n                <p className=\"no-message\">\n                    This is the beginning of your conversation with{\" \"}\n                    {currentFriend}\n                </p>\n            ) : null}\n\n            <MsgForm\n                addNewMessage={props.addNewMessage}\n                updateSaved={props.updateSaved}\n                setSavedMsg={props.setSavedMsg}\n                savedMsg={props.savedMsg}\n                currentMessages={currentMessages}\n                addNewMessage={props.addNewMessage}\n                updateMessage={props.updateMessage}\n                editMode={props.editMode}\n                setEditMode={props.setEditMode}\n                editIndex={props.editIndex}\n                enterEditMode={props.enterEditMode}\n                lastMessageIndex={currentMessages.length - 1}\n                msgInput={props.msgInput}\n            />\n        </div>\n    );\n};\n\nexport default ChatWindow;\n","import React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * This component renders the form to add a new friend\n */\nconst NewFriendForm = (props) => {\n    const input = useRef();\n\n    /** Handles the submission of the new friend form */\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (input.current.value.length > 0) {\n            props.addNewFriend(input.current.value);\n            input.current.value = \"\";\n        }\n    };\n\n    return (\n        <form className=\"message-form friend-form\" onSubmit={handleSubmit}>\n            <label htmlFor=\"new-friend\" className=\"sr-only\">\n                Enter new friend's Name\n            </label>\n            <input\n                id=\"new-friend\"\n                type=\"text\"\n                ref={input}\n                className=\"new-friend\"\n                placeholder=\"Add a friend\"\n                autoComplete=\"off\"\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">add a friend</span>\n                <FontAwesomeIcon icon={faPlusCircle} />\n            </button>\n        </form>\n    );\n};\n\nexport default NewFriendForm;\n","import React, { useState } from \"react\";\nimport NewFriendForm from \"../NewFriendForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserFriends } from \"@fortawesome/free-solid-svg-icons\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * Renders the friend list\n */\nconst FriendList = (props) => {\n    /**\n     * Switches conversation when a friend button is clicked\n     * @param {onClick} event\n     */\n    const handleClick = (event) => {\n        event.preventDefault();\n        const newSaveMsg = props.editMode ? \"\" : props.savedMsg;\n        props.updateSaved(newSaveMsg);\n        const newConv = event.target.dataset.conv;\n        props.setCurrentConv(newConv);\n        props.setSavedMsg(props.data[newConv].saved);\n        props.setEditMode(false);\n        props.msgInput.current.focus();\n        setDisplayFriends(false);\n    };\n\n    /**\n     * This state is used for small screen sizes only, allows to display or hide\n     * the friend list\n     */\n    const [displayFriends, setDisplayFriends] = useState(false);\n\n    /**\n     * Displays and hides the friend list\n     * @param {onClick} event\n     */\n    const handleDisplayFriends = (event) => {\n        event.preventDefault();\n        setDisplayFriends(!displayFriends);\n    };\n\n    /**\n     * friendList is an array containing the friend names and their id\n     */\n    let friendList = [];\n    for (const [key, value] of Object.entries(props.data)) {\n        friendList.push({ name: value.name, id: key });\n    }\n\n    return (\n        <div className=\"friend-list\">\n            <h2 className=\"friends-title\">\n                <button\n                    className=\"hamburger-icon\"\n                    onClick={handleDisplayFriends}\n                >\n                    <span className=\"sr-only\">Display Friend List</span>\n                    <FontAwesomeIcon icon={faBars} />\n                </button>\n                <FontAwesomeIcon icon={faUserFriends} /> friends\n            </h2>\n            <div\n                className={\n                    displayFriends\n                        ? \"friends-buttons\"\n                        : \"friend-buttons hidden-mobile\"\n                }\n            >\n                {friendList.map((friend) => {\n                    return (\n                        <button\n                            className={\n                                friend.id === props.currentConv\n                                    ? \"friend-btn friend-selected\"\n                                    : \"friend-btn\"\n                            }\n                            key={friend.id}\n                            data-conv={friend.id}\n                            onClick={handleClick}\n                        >\n                            {friend.name}\n                        </button>\n                    );\n                })}\n                <NewFriendForm addNewFriend={props.addNewFriend} />\n            </div>\n        </div>\n    );\n};\n\nexport default FriendList;\n","import React, { useState, useRef } from \"react\";\nimport ChatWindow from \"../ChatWindow\";\nimport FriendList from \"../FriendList\";\n\n/**\n * The chat application\n */\nconst ChatApp = () => {\n    /**\n     * The currentConv state determines the conversation currently rendered\n     */\n    const [currentConv, setCurrentConv] = useState(\"1\");\n\n    /** The editMode state defines if a message is being edited or not */\n    const [editMode, setEditMode] = useState(false);\n\n    /** editIndex holds the index of the message currently being edited */\n    const [editIndex, setEditIndex] = useState(null);\n\n    const msgInput = useRef();\n\n    /**\n     * The data object holds all friends and their related messages\n     */\n    const [data, setData] = useState({\n        1: { name: \"Daniel\", messages: [], saved: \"\", editMode: false },\n        2: { name: \"Issaaf\", messages: [], saved: \"\", editMode: false },\n        3: { name: \"Simon\", messages: [], saved: \"\", editMode: false },\n        4: { name: \"Tracy\", messages: [], saved: \"\", editMode: false },\n        5: { name: \"Whiskey\", messages: [], saved: \"\", editMode: false },\n    });\n\n    /**\n     * The savedMsg state hold the text currently displayed in the message input\n     */\n    const [savedMsg, setSavedMsg] = useState(\"\");\n\n    /**\n     * Add a message to the current conversation\n     * @param {string} newMessage\n     * @param {string} direction\n     */\n    const addNewMessage = (newMessage, direction) => {\n        const selectedConv = data[currentConv];\n        const time = new Date().toLocaleString();\n        selectedConv.messages.push({\n            message: newMessage,\n            time: time,\n            direction: direction,\n        });\n        const updatedData = { ...data };\n        updatedData[currentConv] = selectedConv;\n        setData(updatedData);\n        setSavedMsg(\"\");\n    };\n\n    /**\n     * The following function saves any unsent message to that current conversation\n     * object\n     * @param {string} msg The saved message\n     */\n    const updateSaved = (msg) => {\n        const selectedConv = data[currentConv];\n        selectedConv.saved = msg;\n        const updatedData = { ...data };\n        updatedData[currentConv] = selectedConv;\n        setData(updatedData);\n    };\n\n    /**\n     * The following finds the message to be edited, adds this\n     * message to the text input and focuses on it.\n     * @param {number} index The index of the message to be edited\n     */\n    const enterEditMode = (index) => {\n        const savedMessage = data[currentConv].messages[index].message;\n        setEditIndex(index);\n        setSavedMsg(savedMessage);\n        setEditMode(true);\n        msgInput.current.focus();\n    };\n\n    /**\n     * This message updates a message and turns off \"edit mode\"\n     * @param {string} newMessage The updated message\n     */\n    const updateMessage = (newMessage) => {\n        if (newMessage.trim().length > 0) {\n            const selectedConv = data[currentConv];\n            const time = new Date().toLocaleString();\n            selectedConv.messages[editIndex].message = newMessage;\n            selectedConv.messages[editIndex].edit = time;\n            const updatedData = { ...data };\n            updatedData[currentConv] = selectedConv;\n            setData(updatedData);\n        }\n        setEditMode(false);\n        setSavedMsg(\"\");\n    };\n\n    /**\n     * Add a new friend with empty messages to the data state\n     * And open this conversation.\n     * @param {string} name The name of the new friend\n     */\n    const addNewFriend = (name) => {\n        const keys = Object.keys(data).map((x) => parseInt(x));\n        const newKey = Math.max(...keys) + 1;\n        const updatedData = { ...data };\n        updatedData[newKey] = {\n            name: name,\n            messages: [],\n            saved: \"\",\n            editMode: false,\n        };\n        setData(updatedData);\n        setCurrentConv(newKey.toString());\n    };\n\n    return (\n        <>\n            <div className=\"chat-container\">\n                <FriendList\n                    data={data}\n                    currentConv={currentConv}\n                    setCurrentConv={setCurrentConv}\n                    addNewFriend={addNewFriend}\n                    updateSaved={updateSaved}\n                    savedMsg={savedMsg}\n                    setSavedMsg={setSavedMsg}\n                    editMode={editMode}\n                    setEditMode={setEditMode}\n                    msgInput={msgInput}\n                />\n                <ChatWindow\n                    messages={data[currentConv]}\n                    addNewMessage={addNewMessage}\n                    updateSaved={updateSaved}\n                    setSavedMsg={setSavedMsg}\n                    savedMsg={savedMsg}\n                    editMode={editMode}\n                    setEditMode={setEditMode}\n                    editIndex={editIndex}\n                    setEditIndex={setEditIndex}\n                    updateMessage={updateMessage}\n                    msgInput={msgInput}\n                    enterEditMode={enterEditMode}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default ChatApp;\n","import ChatApp from \"./components/ChatApp\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ChatApp />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}