{"version":3,"sources":["components/MsgForm/index.js","components/Message/index.js","components/ChatWindow/index.js","components/NewFriendForm/index.js","components/FriendList/index.js","components/ChatApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["MsgForm","props","input","msgInput","current","useState","displayEmojis","setDisplayEmojis","className","editMode","onSubmit","event","preventDefault","value","trim","length","addNewMessage","savedMsg","setSavedMsg","updateMessage","editIndex","htmlFor","disableAutoFocus","onEmojiClick","emojiObject","cursorPosition","selectionStart","selectionLength","selectionEnd","textArray","split","splice","emoji","newText","join","focus","type","onClick","icon","faSmile","id","ref","placeholder","autoComplete","onChange","currentTarget","onKeyDown","keyCode","lastMessageIndex","blur","setTimeout","enterEditMode","faPaperPlane","Message","index","message","edit","time","ChatWindow","currentFriend","messages","name","currentMessages","messageList","useRef","useEffect","addEventListener","target","scroll","top","scrollHeight","map","updateSaved","setEditMode","NewFriendForm","addNewFriend","faPlusCircle","FriendList","handleClick","newSaveMsg","newConv","dataset","conv","setCurrentConv","data","saved","setDisplayFriends","displayFriends","friendList","Object","entries","key","push","faBars","faUserFriends","friend","currentConv","data-conv","ChatApp","setEditIndex","1","2","3","4","5","setData","msg","selectedConv","updatedData","keys","x","parseInt","newKey","Math","max","toString","newMessage","Date","toLocaleString","savedMessage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c63927e.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane, faSmile } from \"@fortawesome/free-solid-svg-icons\";\nimport Picker from \"emoji-picker-react\";\n\n/**\n * This renders the form to send a new message.\n */\nconst MsgForm = (props) => {\n    const input = props.msgInput.current;\n\n    /** This functions handles the submission of the new message form */\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        let trimmedMsg = input.value.trim();\n        if (trimmedMsg.length > 0 && !props.editMode) {\n            props.addNewMessage(props.savedMsg);\n            props.setSavedMsg(\"\");\n        }\n\n        if (props.editMode) {\n            props.updateMessage(props.editIndex, props.savedMsg);\n        }\n    };\n\n    const handleChange = (event) => {\n        props.setSavedMsg(event.currentTarget.value);\n    };\n\n    /** This state defines if the emoji picker is visible or not */\n    const [displayEmojis, setDisplayEmojis] = useState(false);\n\n    /**\n     * This function handles displaying or hiding the emoji picker on click\n     * @param {onClick} event\n     */\n    const handleDisplayPicker = (event) => {\n        event.preventDefault();\n        setDisplayEmojis(!displayEmojis);\n    };\n\n    /** Edit the latest message when up arrow is pressed */\n    const handleKeyPress = (event) => {\n        if (\n            event.keyCode === 38 &&\n            props.lastMessageIndex >= 0 &&\n            props.editMode === false\n        ) {\n            input.blur();\n            setTimeout(() => {\n                props.enterEditMode(props.lastMessageIndex);\n            }, 0);\n        }\n    };\n    /**\n     * Adds an emoji in the string of the input, at the curor's current position\n     * Browser focus then returns to the text input and places the cursor after the\n     * emoji\n     */\n    const onEmojiClick = (event, emojiObject) => {\n        setDisplayEmojis(false);\n        const cursorPosition = input.selectionStart;\n        const selectionLength = input.selectionEnd - input.selectionStart;\n        const textArray = input.value.split(\"\");\n        textArray.splice(cursorPosition, selectionLength, emojiObject.emoji);\n        const newText = textArray.join(\"\");\n        props.setSavedMsg(newText);\n\n        input.focus();\n        input.selectionStart = input.selectionEnd = cursorPosition + 1;\n    };\n\n    return (\n        <form\n            className={\n                props.editMode ? \"message-form editing-input\" : \"message-form\"\n            }\n            onSubmit={handleSubmit}\n            key={\"MessageForm\"}\n        >\n            <label htmlFor=\"message-input\" className=\"sr-only\">\n                Message:\n            </label>\n            <div className={displayEmojis ? \"emoji-picker\" : \"hidden\"}>\n                <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\n            </div>\n            <button\n                type=\"button\"\n                className=\"open-emojis\"\n                onClick={handleDisplayPicker}\n            >\n                <FontAwesomeIcon icon={faSmile} />\n            </button>\n            <input\n                id=\"message-input\"\n                type=\"text\"\n                ref={props.msgInput}\n                className=\"message-input\"\n                placeholder=\"Type here...\"\n                autoComplete=\"off\"\n                onChange={handleChange}\n                value={props.savedMsg || \"\"}\n                onKeyDown={handleKeyPress}\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">send</span>\n                <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n        </form>\n    );\n};\n\nexport default MsgForm;\n","import React from \"react\";\n\nconst Message = (props) => {\n    const handleClick = () => props.enterEditMode(props.index);\n\n    return (\n        <>\n            <button\n                className={\n                    props.editMode && props.index === props.editIndex\n                        ? \"message editing\"\n                        : \"message\"\n                }\n                onClick={handleClick}\n            >\n                {props.message.message}\n            </button>\n            <p className=\"msg-date\">\n                {props.message.edit\n                    ? \"edited on \" + props.message.edit\n                    : props.message.time}\n            </p>\n        </>\n    );\n};\n\nexport default Message;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport MsgForm from \"../MsgForm\";\nimport Message from \"../Message\";\n\n/**\n * This renders the entire chat window, including the list of messages and the\n * input for new messages.\n */\nconst ChatWindow = (props) => {\n    const currentFriend = props.messages.name;\n    const currentMessages = props.messages.messages;\n\n    const messageList = useRef(null);\n\n    /**\n     * This effect ensures the pages scrolls to the bottom of the page if the\n     * height of the message list is longer than the height of its container\n     */\n    useEffect(() => {\n        if (messageList) {\n            messageList.current.addEventListener(\"DOMNodeInserted\", (event) => {\n                const { currentTarget: target } = event;\n                target.scroll({ top: target.scrollHeight });\n            });\n        }\n    }, []);\n\n    return (\n        <div className=\"chat-window\">\n            <ul className=\"message-list\" ref={messageList}>\n                {currentMessages.length !== 0\n                    ? currentMessages.map((message, index) => (\n                          <li key={index}>\n                              <Message\n                                  message={message}\n                                  enterEditMode={props.enterEditMode}\n                                  index={index}\n                                  editMode={props.editMode}\n                                  editIndex={props.editIndex}\n                              />\n                          </li>\n                      ))\n                    : null}\n            </ul>\n\n            {currentMessages.length === 0 ? (\n                <p className=\"no-message\">\n                    This is the beginning of your conversation with{\" \"}\n                    {currentFriend}\n                </p>\n            ) : null}\n\n            <MsgForm\n                addNewMessage={props.addNewMessage}\n                updateSaved={props.updateSaved}\n                setSavedMsg={props.setSavedMsg}\n                savedMsg={props.savedMsg}\n                currentMessages={currentMessages}\n                addNewMessage={props.addNewMessage}\n                updateMessage={props.updateMessage}\n                editMode={props.editMode}\n                setEditMode={props.setEditMode}\n                editIndex={props.editIndex}\n                enterEditMode={props.enterEditMode}\n                lastMessageIndex={currentMessages.length - 1}\n                msgInput={props.msgInput}\n            />\n        </div>\n    );\n};\n\nexport default ChatWindow;\n","import React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * This component renders the form to add a new friend\n */\nconst NewFriendForm = (props) => {\n    const input = useRef();\n\n    /** Handles the submission of the new friend form */\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (input.current.value.length > 0) {\n            props.addNewFriend(input.current.value);\n            input.current.value = \"\";\n        }\n    };\n\n    return (\n        <form className=\"message-form friend-form\" onSubmit={handleSubmit}>\n            <label htmlFor=\"new-friend\" className=\"sr-only\">\n                Enter new friend's Name\n            </label>\n            <input\n                id=\"new-friend\"\n                type=\"text\"\n                ref={input}\n                className=\"new-friend\"\n                placeholder=\"Add a friend\"\n                autoComplete=\"off\"\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">add a friend</span>\n                <FontAwesomeIcon icon={faPlusCircle} />\n            </button>\n        </form>\n    );\n};\n\nexport default NewFriendForm;\n","import React, { useState } from \"react\";\nimport NewFriendForm from \"../NewFriendForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserFriends } from \"@fortawesome/free-solid-svg-icons\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * Renders the friend list\n */\nconst FriendList = (props) => {\n    /**\n     * Switches conversation when a friend button is clicked\n     * @param {onClick} event\n     */\n    const handleClick = (event) => {\n        event.preventDefault();\n        const newSaveMsg = props.editMode ? \"\" : props.savedMsg;\n        props.updateSaved(newSaveMsg);\n        const newConv = event.target.dataset.conv;\n        props.setCurrentConv(newConv);\n        props.setSavedMsg(props.data[newConv].saved);\n        props.setEditMode(false);\n        props.msgInput.current.focus();\n        setDisplayFriends(false);\n    };\n\n    /**\n     * This state is used for small screen sizes only, allows to display or hide\n     * the friend list\n     */\n    const [displayFriends, setDisplayFriends] = useState(false);\n\n    /**\n     * Displays and hides the friend list\n     * @param {onClick} event\n     */\n    const handleDisplayFriends = (event) => {\n        event.preventDefault();\n        setDisplayFriends(!displayFriends);\n    };\n\n    /**\n     * friendList is an array containing the friend names and their id\n     */\n    let friendList = [];\n    for (const [key, value] of Object.entries(props.data)) {\n        friendList.push({ name: value.name, id: key });\n    }\n\n    return (\n        <div className=\"friend-list\">\n            <h2 className=\"friends-title\">\n                <button\n                    className=\"hamburger-icon\"\n                    onClick={handleDisplayFriends}\n                >\n                    <span className=\"sr-only\">Display Friend List</span>\n                    <FontAwesomeIcon icon={faBars} />\n                </button>\n                <FontAwesomeIcon icon={faUserFriends} /> friends\n            </h2>\n            <div\n                className={\n                    displayFriends\n                        ? \"friends-buttons\"\n                        : \"friend-buttons hidden-mobile\"\n                }\n            >\n                {friendList.map((friend) => {\n                    return (\n                        <button\n                            className={\n                                friend.id === props.currentConv\n                                    ? \"friend-btn friend-selected\"\n                                    : \"friend-btn\"\n                            }\n                            key={friend.id}\n                            data-conv={friend.id}\n                            onClick={handleClick}\n                        >\n                            {friend.name}\n                        </button>\n                    );\n                })}\n                <NewFriendForm addNewFriend={props.addNewFriend} />\n            </div>\n        </div>\n    );\n};\n\nexport default FriendList;\n","import React, { useState, useRef } from \"react\";\nimport ChatWindow from \"../ChatWindow\";\nimport FriendList from \"../FriendList\";\n\n/**\n * The chat application\n */\nconst ChatApp = () => {\n    /**\n     * The currentConv state determines the conversation currently rendered\n     */\n    const [currentConv, setCurrentConv] = useState(\"1\");\n    const [editMode, setEditMode] = useState(false);\n    const [editIndex, setEditIndex] = useState(null);\n    const msgInput = useRef();\n\n    /**\n     * The data object holds all friends and their related messages\n     */\n    const [data, setData] = useState({\n        1: { name: \"Daniel\", messages: [], saved: \"\", editMode: false },\n        2: { name: \"Issaaf\", messages: [], saved: \"\", editMode: false },\n        3: { name: \"Simon\", messages: [], saved: \"\", editMode: false },\n        4: { name: \"Tracy\", messages: [], saved: \"\", editMode: false },\n        5: { name: \"Whiskey\", messages: [], saved: \"\", editMode: false },\n    });\n\n    const [savedMsg, setSavedMsg] = useState(\"\");\n\n    const updateSaved = (msg) => {\n        const selectedConv = data[currentConv];\n        selectedConv.saved = msg;\n        const updatedData = { ...data };\n        updatedData[currentConv] = selectedConv;\n        setData(updatedData);\n    };\n\n    /**\n     * Add a message to the current conversation\n     * @param {string} newMessage\n     */\n    const addNewMessage = (newMessage) => {\n        const selectedConv = data[currentConv];\n        const time = new Date().toLocaleString();\n        selectedConv.messages.push({ message: newMessage, time: time });\n        const updatedData = { ...data };\n        updatedData[currentConv] = selectedConv;\n        setData(updatedData);\n    };\n\n    const enterEditMode = (index) => {\n        const savedMessage = data[currentConv].messages[index].message;\n        setEditIndex(index);\n        setSavedMsg(savedMessage);\n        setEditMode(true);\n        msgInput.current.focus();\n    };\n\n    const updateMessage = (id, newMessage) => {\n        const selectedConv = data[currentConv];\n        const time = new Date().toLocaleString();\n        selectedConv.messages[id].message = newMessage;\n        selectedConv.messages[id].edit = time;\n        const updatedData = { ...data };\n        updatedData[currentConv] = selectedConv;\n        setData(updatedData);\n        setEditMode(false);\n        setSavedMsg(\"\");\n    };\n\n    /**\n     * Add a new friend with empty messages to the data state\n     * @param {string} name\n     */\n    const addNewFriend = (name) => {\n        const keys = Object.keys(data).map((x) => parseInt(x));\n        const newKey = Math.max(...keys) + 1;\n        const updatedData = { ...data };\n        updatedData[newKey] = {\n            name: name,\n            messages: [],\n            saved: \"\",\n            editMode: false,\n        };\n        setData(updatedData);\n        setCurrentConv(newKey.toString());\n    };\n\n    return (\n        <>\n            <div className=\"chat-container\">\n                <FriendList\n                    data={data}\n                    currentConv={currentConv}\n                    setCurrentConv={setCurrentConv}\n                    addNewFriend={addNewFriend}\n                    updateSaved={updateSaved}\n                    savedMsg={savedMsg}\n                    setSavedMsg={setSavedMsg}\n                    editMode={editMode}\n                    setEditMode={setEditMode}\n                    msgInput={msgInput}\n                />\n                <ChatWindow\n                    messages={data[currentConv]}\n                    addNewMessage={addNewMessage}\n                    updateSaved={updateSaved}\n                    setSavedMsg={setSavedMsg}\n                    savedMsg={savedMsg}\n                    editMode={editMode}\n                    setEditMode={setEditMode}\n                    editIndex={editIndex}\n                    setEditIndex={setEditIndex}\n                    updateMessage={updateMessage}\n                    msgInput={msgInput}\n                    enterEditMode={enterEditMode}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default ChatApp;\n","import ChatApp from \"./components/ChatApp\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ChatApp />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}