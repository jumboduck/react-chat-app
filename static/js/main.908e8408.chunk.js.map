{"version":3,"sources":["components/MsgForm/index.js","components/ChatWindow/index.js","components/FriendList/index.js","components/ChatApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["MsgForm","props","input","useRef","className","onSubmit","event","preventDefault","current","value","length","addNewMessage","currentConv","htmlFor","id","type","ref","placeholder","autoComplete","icon","faPaperPlane","ChatWindow","currentFriend","messages","find","friend","name","messageList","currentMessages","conv","useEffect","addEventListener","target","currentTarget","scroll","top","scrollHeight","map","message","index","FriendList","handleClick","newConv","dataset","setCurrentConv","setDisplayFriends","useState","displayFriends","onClick","faBars","faUserFriends","data-conv","ChatApp","setMessages","newMessage","selectedConv","push","updatedMessages","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.908e8408.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MsgForm = (props) => {\n    const input = useRef();\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (input.current.value.length > 0) {\n            props.addNewMessage(props.currentConv, input.current.value);\n            input.current.value = \"\";\n        }\n    };\n\n    return (\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <label htmlFor=\"message-input\" className=\"sr-only\">\n                Message:\n            </label>\n            <input\n                id=\"message-input\"\n                type=\"text\"\n                ref={input}\n                className=\"message-input\"\n                placeholder=\"Type here...\"\n                autoComplete=\"off\"\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">send</span>\n                <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n        </form>\n    );\n};\n\nexport default MsgForm;\n","import React, { useEffect, useRef } from \"react\";\nimport MsgForm from \"../MsgForm\";\n\nconst ChatWindow = (props) => {\n    const currentFriend = props.messages.find(\n        (friend) => friend.id === props.currentConv\n    ).name;\n    const messageList = useRef(null);\n\n    const currentMessages = props.messages.find(\n        (conv) => conv.id === props.currentConv\n    ).messages;\n\n    useEffect(() => {\n        if (messageList) {\n            messageList.current.addEventListener(\"DOMNodeInserted\", (event) => {\n                const { currentTarget: target } = event;\n                target.scroll({ top: target.scrollHeight });\n            });\n        }\n    }, []);\n\n    return (\n        <div className=\"chat-window\">\n            {currentMessages.length !== 0 ? (\n                <ul className=\"message-list\" ref={messageList}>\n                    {currentMessages.map((message, index) => (\n                        <li className=\"message\" key={index}>\n                            {message}\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <p className=\"no-message\">\n                    This is the beginning of your conversation with{\" \"}\n                    {currentFriend}\n                </p>\n            )}\n\n            <MsgForm\n                addNewMessage={props.addNewMessage}\n                currentConv={props.currentConv}\n            />\n        </div>\n    );\n};\n\nexport default ChatWindow;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserFriends } from \"@fortawesome/free-solid-svg-icons\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nconst FriendList = (props) => {\n    const handleClick = (event) => {\n        event.preventDefault();\n        const newConv = event.target.dataset.conv;\n        props.setCurrentConv(newConv);\n        setDisplayFriends(false);\n    };\n\n    const [displayFriends, setDisplayFriends] = useState(false);\n\n    const handleDisplayFriends = (event) => {\n        event.preventDefault();\n        setDisplayFriends(!displayFriends);\n    };\n\n    return (\n        <div className=\"friend-list\">\n            <h2 className=\"friends-title\">\n                <button\n                    className=\"hamburger-icon\"\n                    onClick={handleDisplayFriends}\n                >\n                    <span className=\"sr-only\">Display Friend List</span>\n                    <FontAwesomeIcon icon={faBars} />\n                </button>\n                <FontAwesomeIcon icon={faUserFriends} /> friends\n            </h2>\n            <div\n                className={\n                    displayFriends\n                        ? \"friends-buttons\"\n                        : \"friend-buttons hidden-mobile\"\n                }\n            >\n                {props.messages.map((friend) => {\n                    return (\n                        <button\n                            className={\n                                friend.id === props.currentConv\n                                    ? \"friend-btn friend-selected\"\n                                    : \"friend-btn\"\n                            }\n                            key={friend.id}\n                            data-conv={friend.id}\n                            onClick={handleClick}\n                        >\n                            {friend.name}\n                        </button>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default FriendList;\n","import React, { useState } from \"react\";\nimport ChatWindow from \"../ChatWindow\";\nimport FriendList from \"../FriendList\";\n\nconst ChatApp = () => {\n    const [currentConv, setCurrentConv] = useState(\"1\");\n\n    const [messages, setMessages] = useState([\n        { id: \"1\", name: \"Daniel\", messages: [\"hello\"] },\n        { id: \"2\", name: \"Issaaf\", messages: [] },\n        { id: \"3\", name: \"Simon\", messages: [] },\n        { id: \"4\", name: \"Tracy\", messages: [] },\n        { id: \"5\", name: \"Whiskey\", messages: [] },\n    ]);\n\n    const addNewMessage = (id, newMessage) => {\n        const selectedConv = messages.find((conv) => conv.id === id);\n        selectedConv.messages.push(newMessage);\n        let updatedMessages = messages.map((conv) =>\n            conv.id !== id ? conv : selectedConv\n        );\n        setMessages(updatedMessages);\n    };\n\n    return (\n        <>\n            <div className=\"chat-container\">\n                <FriendList\n                    messages={messages}\n                    currentConv={currentConv}\n                    setCurrentConv={setCurrentConv}\n                />\n                <ChatWindow\n                    messages={messages}\n                    currentConv={currentConv}\n                    addNewMessage={addNewMessage}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default ChatApp;\n","import ChatApp from \"./components/ChatApp\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ChatApp />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}