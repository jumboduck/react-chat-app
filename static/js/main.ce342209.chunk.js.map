{"version":3,"sources":["components/MsgForm/index.js","components/Message/index.js","components/ChatWindow/index.js","components/NewFriendForm/index.js","components/FriendList/index.js","components/ChatApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["MsgForm","props","input","useRef","useState","displayEmojis","setDisplayEmojis","className","onSubmit","event","preventDefault","current","value","trim","length","addNewMessage","setSavedMsg","htmlFor","disableAutoFocus","onEmojiClick","emojiObject","cursorPosition","selectionStart","selectionLength","selectionEnd","textArray","split","splice","emoji","newText","join","focus","type","onClick","icon","faSmile","id","ref","placeholder","autoComplete","onChange","currentTarget","savedMsg","faPaperPlane","Message","message","time","ChatWindow","currentFriend","messages","name","currentMessages","messageList","useEffect","addEventListener","target","scroll","top","scrollHeight","map","index","updateSaved","NewFriendForm","addNewFriend","faPlusCircle","FriendList","handleClick","newConv","dataset","conv","setCurrentConv","data","saved","setDisplayFriends","displayFriends","friendList","Object","entries","key","push","faBars","faUserFriends","friend","currentConv","data-conv","ChatApp","1","2","3","4","5","setData","msg","selectedConv","updatedData","keys","x","parseInt","newKey","Math","max","toString","newMessage","Date","toLocaleString","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce342209.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane, faSmile } from \"@fortawesome/free-solid-svg-icons\";\nimport Picker from \"emoji-picker-react\";\n\n/**\n * This renders the form to send a new message.\n */\nconst MsgForm = (props) => {\n    const input = useRef();\n\n    /** This functions handles the submission of the new message form */\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        let trimmedMsg = input.current.value.trim();\n        if (trimmedMsg.length > 0) {\n            props.addNewMessage(input.current.value);\n            props.setSavedMsg(\"\");\n        }\n    };\n\n    const handleChange = (event) => {\n        props.setSavedMsg(event.currentTarget.value);\n    };\n\n    /** This state defines if the emoji picker is visible or not */\n    const [displayEmojis, setDisplayEmojis] = useState(false);\n\n    /**\n     * This function handles displaying or hiding the emoji picker on click\n     * @param {onClick} event\n     */\n    const handleDisplayPicker = (event) => {\n        event.preventDefault();\n        setDisplayEmojis(!displayEmojis);\n    };\n\n    /**\n     * Adds an emoji in the string of the input, at the curor's current position\n     * Browser focus then returns to the text input and places the cursor after the\n     * emoji\n     */\n    const onEmojiClick = (event, emojiObject) => {\n        setDisplayEmojis(!displayEmojis);\n\n        const cursorPosition = input.current.selectionStart;\n        const selectionLength =\n            input.current.selectionEnd - input.current.selectionStart;\n        const textArray = input.current.value.split(\"\");\n        textArray.splice(cursorPosition, selectionLength, emojiObject.emoji);\n        const newText = textArray.join(\"\");\n        input.current.value = newText;\n        input.current.focus();\n        input.current.selectionStart = input.current.selectionEnd =\n            cursorPosition + 1;\n    };\n\n    return (\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <label htmlFor=\"message-input\" className=\"sr-only\">\n                Message:\n            </label>\n            <div className={displayEmojis ? \"emoji-picker\" : \"hidden\"}>\n                <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\n            </div>\n            <button\n                type=\"button\"\n                className=\"open-emojis\"\n                onClick={handleDisplayPicker}\n            >\n                <FontAwesomeIcon icon={faSmile} />\n            </button>\n            <input\n                id=\"message-input\"\n                type=\"text\"\n                ref={input}\n                className=\"message-input\"\n                placeholder=\"Type here...\"\n                autoComplete=\"off\"\n                onChange={handleChange}\n                value={props.savedMsg || \"\"}\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">send</span>\n                <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n        </form>\n    );\n};\n\nexport default MsgForm;\n","import React from \"react\";\n\nconst Message = (props) => {\n    return (\n        <>\n            <p className=\"message\">{props.message.message}</p>\n            <p className=\"msg-date\">{props.message.time}</p>\n        </>\n    );\n};\n\nexport default Message;\n","import React, { useEffect, useRef } from \"react\";\nimport MsgForm from \"../MsgForm\";\nimport Message from \"../Message\";\n\n/**\n * This renders the entire chat window, including the list of messages and the\n * input for new messages.\n */\nconst ChatWindow = (props) => {\n    const currentFriend = props.messages.name;\n    const currentMessages = props.messages.messages;\n\n    const messageList = useRef(null);\n\n    /**\n     * This effect ensures the pages scrolls to the bottom of the page if the\n     * height of the message list is longer than the height of its container\n     */\n    useEffect(() => {\n        if (messageList) {\n            messageList.current.addEventListener(\"DOMNodeInserted\", (event) => {\n                const { currentTarget: target } = event;\n                target.scroll({ top: target.scrollHeight });\n            });\n        }\n    }, []);\n\n    return (\n        <div className=\"chat-window\">\n            <ul className=\"message-list\" ref={messageList}>\n                {currentMessages.length !== 0\n                    ? currentMessages.map((message, index) => (\n                          <li key={index}>\n                              <Message message={message} />\n                          </li>\n                      ))\n                    : null}\n            </ul>\n\n            {currentMessages.length === 0 ? (\n                <p className=\"no-message\">\n                    This is the beginning of your conversation with{\" \"}\n                    {currentFriend}\n                </p>\n            ) : null}\n\n            <MsgForm\n                addNewMessage={props.addNewMessage}\n                updateSaved={props.updateSaved}\n                setSavedMsg={props.setSavedMsg}\n                savedMsg={props.savedMsg}\n            />\n        </div>\n    );\n};\n\nexport default ChatWindow;\n","import React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * This component renders the form to add a new friend\n */\nconst NewFriendForm = (props) => {\n    const input = useRef();\n\n    /** Handles the submission of the new friend form */\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (input.current.value.length > 0) {\n            props.addNewFriend(input.current.value);\n            input.current.value = \"\";\n        }\n    };\n\n    return (\n        <form className=\"message-form friend-form\" onSubmit={handleSubmit}>\n            <label htmlFor=\"new-friend\" className=\"sr-only\">\n                Enter new friend's Name\n            </label>\n            <input\n                id=\"new-friend\"\n                type=\"text\"\n                ref={input}\n                className=\"new-friend\"\n                placeholder=\"Add a friend\"\n                autoComplete=\"off\"\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">add a friend</span>\n                <FontAwesomeIcon icon={faPlusCircle} />\n            </button>\n        </form>\n    );\n};\n\nexport default NewFriendForm;\n","import React, { useState } from \"react\";\nimport NewFriendForm from \"../NewFriendForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserFriends } from \"@fortawesome/free-solid-svg-icons\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * Renders the friend list\n */\nconst FriendList = (props) => {\n    /**\n     * Switches conversation when a friend button is clicked\n     * @param {onClick} event\n     */\n    const handleClick = (event) => {\n        event.preventDefault();\n        props.updateSaved(props.savedMsg);\n        const newConv = event.target.dataset.conv;\n        props.setCurrentConv(newConv);\n        props.setSavedMsg(props.data[newConv].saved);\n        setDisplayFriends(false);\n    };\n\n    /**\n     * This state is used for small screen sizes only, allows to display or hide\n     * the friend list\n     */\n    const [displayFriends, setDisplayFriends] = useState(false);\n\n    /**\n     * Displays and hides the friend list\n     * @param {onClick} event\n     */\n    const handleDisplayFriends = (event) => {\n        event.preventDefault();\n        setDisplayFriends(!displayFriends);\n    };\n\n    /**\n     * friendList is an array containing the friend names and their id\n     */\n    let friendList = [];\n    for (const [key, value] of Object.entries(props.data)) {\n        friendList.push({ name: value.name, id: key });\n    }\n\n    return (\n        <div className=\"friend-list\">\n            <h2 className=\"friends-title\">\n                <button\n                    className=\"hamburger-icon\"\n                    onClick={handleDisplayFriends}\n                >\n                    <span className=\"sr-only\">Display Friend List</span>\n                    <FontAwesomeIcon icon={faBars} />\n                </button>\n                <FontAwesomeIcon icon={faUserFriends} /> friends\n            </h2>\n            <div\n                className={\n                    displayFriends\n                        ? \"friends-buttons\"\n                        : \"friend-buttons hidden-mobile\"\n                }\n            >\n                {friendList.map((friend) => {\n                    return (\n                        <button\n                            className={\n                                friend.id === props.currentConv\n                                    ? \"friend-btn friend-selected\"\n                                    : \"friend-btn\"\n                            }\n                            key={friend.id}\n                            data-conv={friend.id}\n                            onClick={handleClick}\n                        >\n                            {friend.name}\n                        </button>\n                    );\n                })}\n                <NewFriendForm addNewFriend={props.addNewFriend} />\n            </div>\n        </div>\n    );\n};\n\nexport default FriendList;\n","import React, { useState } from \"react\";\nimport ChatWindow from \"../ChatWindow\";\nimport FriendList from \"../FriendList\";\n\n/**\n * The chat application\n */\nconst ChatApp = () => {\n    /**\n     * The currentConv state determines the conversation currently rendered\n     */\n    const [currentConv, setCurrentConv] = useState(\"1\");\n\n    /**\n     * The data object holds all friends and their related messages\n     */\n    const [data, setData] = useState({\n        1: { name: \"Daniel\", messages: [], saved: \"\" },\n        2: { name: \"Issaaf\", messages: [], saved: \"\" },\n        3: { name: \"Simon\", messages: [], saved: \"\" },\n        4: { name: \"Tracy\", messages: [], saved: \"\" },\n        5: { name: \"Whiskey\", messages: [], saved: \"\" },\n    });\n\n    const [savedMsg, setSavedMsg] = useState(\"\");\n\n    const updateSaved = (msg) => {\n        const selectedConv = data[currentConv];\n        selectedConv.saved = msg;\n        const updatedData = { ...data };\n        updatedData[currentConv] = selectedConv;\n        setData(updatedData);\n    };\n\n    /**\n     * Add a message to the current conversation\n     * @param {string} newMessage\n     */\n    const addNewMessage = (newMessage) => {\n        const selectedConv = data[currentConv];\n        const time = new Date().toLocaleString();\n        selectedConv.messages.push({ message: newMessage, time: time });\n        const updatedData = { ...data };\n        updatedData[currentConv] = selectedConv;\n        setData(updatedData);\n    };\n\n    /**\n     * Add a new friend with empty messages to the data state\n     * @param {string} name\n     */\n    const addNewFriend = (name) => {\n        const keys = Object.keys(data).map((x) => parseInt(x));\n        const newKey = Math.max(...keys) + 1;\n        const updatedData = { ...data };\n        updatedData[newKey] = { name: name, messages: [] };\n        setData(updatedData);\n        setCurrentConv(newKey.toString());\n    };\n\n    return (\n        <>\n            <div className=\"chat-container\">\n                <FriendList\n                    data={data}\n                    currentConv={currentConv}\n                    setCurrentConv={setCurrentConv}\n                    addNewFriend={addNewFriend}\n                    updateSaved={updateSaved}\n                    savedMsg={savedMsg}\n                    setSavedMsg={setSavedMsg}\n                />\n                <ChatWindow\n                    messages={data[currentConv]}\n                    addNewMessage={addNewMessage}\n                    updateSaved={updateSaved}\n                    setSavedMsg={setSavedMsg}\n                    savedMsg={savedMsg}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default ChatApp;\n","import ChatApp from \"./components/ChatApp\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ChatApp />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}