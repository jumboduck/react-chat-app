{"version":3,"sources":["components/MsgForm/index.js","components/ChatWindow/index.js","components/FriendList/index.js","components/ChatApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["MsgForm","props","input","useRef","className","onSubmit","event","preventDefault","current","value","length","addNewMessage","currentConv","htmlFor","id","type","ref","placeholder","icon","faPaperPlane","ChatWindow","currentFriend","messages","find","friend","name","messageList","currentMessages","conv","useEffect","addEventListener","target","currentTarget","scroll","top","scrollHeight","map","message","index","FriendList","handleClick","newConv","dataset","setCurrentConv","faUserFriends","data-conv","onClick","ChatApp","useState","setMessages","newMessage","selectedConv","push","updatedMessages","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6328a288.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MsgForm = (props) => {\n    const input = useRef();\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (input.current.value.length > 0) {\n            props.addNewMessage(props.currentConv, input.current.value);\n            input.current.value = \"\";\n        }\n    };\n\n    return (\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <label htmlFor=\"message-input\" className=\"sr-only\">\n                Message:\n            </label>\n            <input\n                id=\"message-input\"\n                type=\"text\"\n                ref={input}\n                className=\"message-input\"\n                placeholder=\"Type here...\"\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">send</span>\n                <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n        </form>\n    );\n};\n\nexport default MsgForm;\n","import React, { useEffect, useRef } from \"react\";\nimport MsgForm from \"../MsgForm\";\n\nconst ChatWindow = (props) => {\n    const currentFriend = props.messages.find(\n        (friend) => friend.id === props.currentConv\n    ).name;\n    const messageList = useRef(null);\n\n    const currentMessages = props.messages.find(\n        (conv) => conv.id === props.currentConv\n    ).messages;\n\n    useEffect(() => {\n        if (messageList) {\n            messageList.current.addEventListener(\"DOMNodeInserted\", (event) => {\n                const { currentTarget: target } = event;\n                target.scroll({ top: target.scrollHeight });\n            });\n        }\n    }, []);\n\n    return (\n        <div className=\"chat-window\">\n            {currentMessages.length !== 0 ? (\n                <ul className=\"message-list\" ref={messageList}>\n                    {currentMessages.map((message, index) => (\n                        <li className=\"message\" key={index}>\n                            {message}\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <p className=\"no-message\">\n                    This is the beginning of your conversation with{\" \"}\n                    {currentFriend}\n                </p>\n            )}\n\n            <MsgForm\n                addNewMessage={props.addNewMessage}\n                messages={props.messages}\n                currentConv={props.currentConv}\n            />\n        </div>\n    );\n};\n\nexport default ChatWindow;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserFriends } from \"@fortawesome/free-solid-svg-icons\";\n\nconst FriendList = (props) => {\n    const handleClick = (event) => {\n        event.preventDefault();\n        const newConv = event.target.dataset.conv;\n        props.setCurrentConv(newConv);\n    };\n    return (\n        <div className=\"friend-list\">\n            <h2 className=\"friends-title\">\n                <FontAwesomeIcon icon={faUserFriends} /> friends\n            </h2>\n            {props.messages.map((friend) => {\n                return (\n                    <button\n                        className={\n                            friend.id === props.currentConv\n                                ? \"friend-btn friend-selected\"\n                                : \"friend-btn\"\n                        }\n                        key={friend.id}\n                        data-conv={friend.id}\n                        onClick={handleClick}\n                    >\n                        {friend.name}\n                    </button>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default FriendList;\n","import React, { useState } from \"react\";\nimport ChatWindow from \"../ChatWindow\";\nimport FriendList from \"../FriendList\";\n\nconst ChatApp = () => {\n    const [currentConv, setCurrentConv] = useState(\"1\");\n\n    const [messages, setMessages] = useState([\n        { id: \"1\", name: \"Daniel\", messages: [\"hello\"] },\n        { id: \"2\", name: \"Issaaf\", messages: [] },\n        { id: \"3\", name: \"Simon\", messages: [] },\n        { id: \"4\", name: \"Tracy\", messages: [] },\n        { id: \"5\", name: \"Whiskey\", messages: [] },\n    ]);\n\n    const addNewMessage = (id, newMessage) => {\n        const selectedConv = messages.find((conv) => conv.id === id);\n        selectedConv.messages.push(newMessage);\n        let updatedMessages = messages.map((conv) =>\n            conv.id !== id ? conv : selectedConv\n        );\n        setMessages(updatedMessages);\n    };\n\n    return (\n        <>\n            <div className=\"chat-container\">\n                <FriendList\n                    messages={messages}\n                    currentConv={currentConv}\n                    setCurrentConv={setCurrentConv}\n                />\n                <ChatWindow\n                    messages={messages}\n                    currentConv={currentConv}\n                    addNewMessage={addNewMessage}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default ChatApp;\n","import ChatApp from \"./components/ChatApp\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ChatApp />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}