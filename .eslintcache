[{"/Users/simoncastagna/coding_projects/react-chat-app/src/index.js":"1","/Users/simoncastagna/coding_projects/react-chat-app/src/App.js":"2","/Users/simoncastagna/coding_projects/react-chat-app/src/components/ChatApp/index.js":"3","/Users/simoncastagna/coding_projects/react-chat-app/src/components/ChatWindow/index.js":"4","/Users/simoncastagna/coding_projects/react-chat-app/src/components/MsgForm/index.js":"5","/Users/simoncastagna/coding_projects/react-chat-app/src/components/FriendList/index.js":"6","/Users/simoncastagna/coding_projects/react-chat-app/src/components/Message/index.js":"7","/Users/simoncastagna/coding_projects/react-chat-app/src/components/NewFriendForm/index.js":"8","/Users/simoncastagna/coding_projects/react-chat-app/src/reportWebVitals.js":"9"},{"size":500,"mtime":1610715715921,"results":"10","hashOfConfig":"11"},{"size":194,"mtime":1610725272618,"results":"12","hashOfConfig":"11"},{"size":4074,"mtime":1611154695081,"results":"13","hashOfConfig":"11"},{"size":2570,"mtime":1611153332769,"results":"14","hashOfConfig":"11"},{"size":3687,"mtime":1611152063209,"results":"15","hashOfConfig":"11"},{"size":2989,"mtime":1611154777118,"results":"16","hashOfConfig":"11"},{"size":711,"mtime":1611152228352,"results":"17","hashOfConfig":"11"},{"size":1289,"mtime":1611094945894,"results":"18","hashOfConfig":"11"},{"size":452,"mtime":1611142124884,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1tt3elf",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/simoncastagna/coding_projects/react-chat-app/src/index.js",[],["41","42"],"/Users/simoncastagna/coding_projects/react-chat-app/src/App.js",[],"/Users/simoncastagna/coding_projects/react-chat-app/src/components/ChatApp/index.js",[],"/Users/simoncastagna/coding_projects/react-chat-app/src/components/ChatWindow/index.js",["43","44"],"import React, { useState, useEffect, useRef } from \"react\";\nimport MsgForm from \"../MsgForm\";\nimport Message from \"../Message\";\n\n/**\n * This renders the entire chat window, including the list of messages and the\n * input for new messages.\n */\nconst ChatWindow = (props) => {\n    const currentFriend = props.messages.name;\n    const currentMessages = props.messages.messages;\n\n    const messageList = useRef(null);\n\n    /**\n     * This effect ensures the pages scrolls to the bottom of the page if the\n     * height of the message list is longer than the height of its container\n     */\n    useEffect(() => {\n        if (messageList) {\n            messageList.current.addEventListener(\"DOMNodeInserted\", (event) => {\n                const { currentTarget: target } = event;\n                target.scroll({ top: target.scrollHeight });\n            });\n        }\n    }, []);\n\n    return (\n        <div className=\"chat-window\">\n            <ul className=\"message-list\" ref={messageList}>\n                {currentMessages.length !== 0\n                    ? currentMessages.map((message, index) => (\n                          <li key={index}>\n                              <Message\n                                  message={message}\n                                  enterEditMode={props.enterEditMode}\n                                  index={index}\n                                  editMode={props.editMode}\n                                  editIndex={props.editIndex}\n                              />\n                          </li>\n                      ))\n                    : null}\n            </ul>\n\n            {currentMessages.length === 0 ? (\n                <p className=\"no-message\">\n                    This is the beginning of your conversation with{\" \"}\n                    {currentFriend}\n                </p>\n            ) : null}\n\n            <MsgForm\n                addNewMessage={props.addNewMessage}\n                updateSaved={props.updateSaved}\n                setSavedMsg={props.setSavedMsg}\n                savedMsg={props.savedMsg}\n                currentMessages={currentMessages}\n                addNewMessage={props.addNewMessage}\n                updateMessage={props.updateMessage}\n                editMode={props.editMode}\n                setEditMode={props.setEditMode}\n                editIndex={props.editIndex}\n                enterEditMode={props.enterEditMode}\n                lastMessageIndex={currentMessages.length - 1}\n                msgInput={props.msgInput}\n            />\n        </div>\n    );\n};\n\nexport default ChatWindow;\n","/Users/simoncastagna/coding_projects/react-chat-app/src/components/MsgForm/index.js",["45","46"],"import React, { useRef, useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane, faSmile } from \"@fortawesome/free-solid-svg-icons\";\nimport Picker from \"emoji-picker-react\";\n\n/**\n * This renders the form to send a new message.\n */\nconst MsgForm = (props) => {\n    const input = props.msgInput.current;\n\n    /** This functions handles the submission of the new message form */\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        let trimmedMsg = input.value.trim();\n        if (trimmedMsg.length > 0 && !props.editMode) {\n            props.addNewMessage(props.savedMsg);\n            props.setSavedMsg(\"\");\n        }\n\n        if (props.editMode) {\n            props.updateMessage(props.editIndex, props.savedMsg);\n        }\n    };\n\n    const handleChange = (event) => {\n        props.setSavedMsg(event.currentTarget.value);\n    };\n\n    /** This state defines if the emoji picker is visible or not */\n    const [displayEmojis, setDisplayEmojis] = useState(false);\n\n    /**\n     * This function handles displaying or hiding the emoji picker on click\n     * @param {onClick} event\n     */\n    const handleDisplayPicker = (event) => {\n        event.preventDefault();\n        setDisplayEmojis(!displayEmojis);\n    };\n\n    /** Edit the latest message when up arrow is pressed */\n    const handleKeyPress = (event) => {\n        if (\n            event.keyCode === 38 &&\n            props.lastMessageIndex >= 0 &&\n            props.editMode === false\n        ) {\n            input.blur();\n            setTimeout(() => {\n                props.enterEditMode(props.lastMessageIndex);\n            }, 0);\n        }\n    };\n    /**\n     * Adds an emoji in the string of the input, at the curor's current position\n     * Browser focus then returns to the text input and places the cursor after the\n     * emoji\n     */\n    const onEmojiClick = (event, emojiObject) => {\n        setDisplayEmojis(false);\n        const cursorPosition = input.selectionStart;\n        const selectionLength = input.selectionEnd - input.selectionStart;\n        const textArray = input.value.split(\"\");\n        textArray.splice(cursorPosition, selectionLength, emojiObject.emoji);\n        const newText = textArray.join(\"\");\n        props.setSavedMsg(newText);\n\n        input.focus();\n        input.selectionStart = input.selectionEnd = cursorPosition + 1;\n    };\n\n    return (\n        <form\n            className=\"message-form\"\n            onSubmit={handleSubmit}\n            key={\"MessageForm\"}\n        >\n            <label htmlFor=\"message-input\" className=\"sr-only\">\n                Message:\n            </label>\n            <div className={displayEmojis ? \"emoji-picker\" : \"hidden\"}>\n                <Picker disableAutoFocus={true} onEmojiClick={onEmojiClick} />\n            </div>\n            <button\n                type=\"button\"\n                className=\"open-emojis\"\n                onClick={handleDisplayPicker}\n            >\n                <FontAwesomeIcon icon={faSmile} />\n            </button>\n            <input\n                id=\"message-input\"\n                type=\"text\"\n                ref={props.msgInput}\n                className=\"message-input\"\n                placeholder=\"Type here...\"\n                autoComplete=\"off\"\n                onChange={handleChange}\n                value={props.savedMsg || \"\"}\n                onKeyDown={handleKeyPress}\n            />\n            <button type=\"submit\" className=\"send-message\">\n                <span className=\"sr-only\">send</span>\n                <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n        </form>\n    );\n};\n\nexport default MsgForm;\n","/Users/simoncastagna/coding_projects/react-chat-app/src/components/FriendList/index.js",[],"/Users/simoncastagna/coding_projects/react-chat-app/src/components/Message/index.js",[],"/Users/simoncastagna/coding_projects/react-chat-app/src/components/NewFriendForm/index.js",[],"/Users/simoncastagna/coding_projects/react-chat-app/src/reportWebVitals.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":59,"column":17,"nodeType":"57","endLine":59,"endColumn":52},{"ruleId":"51","severity":1,"message":"58","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":23},{"ruleId":"51","severity":1,"message":"59","line":1,"column":35,"nodeType":"53","messageId":"54","endLine":1,"endColumn":44},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useRef' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]